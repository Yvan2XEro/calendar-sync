name: calendar-sync

services:
  postgres:
    image: postgres:16.2-alpine
    container_name: calendar-sync-postgres
    environment:
      POSTGRES_DB: calendar-sync
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "54322:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  server:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
      args:
        NEXT_PUBLIC_OIDC_PROVIDER_ID: ${NEXT_PUBLIC_OIDC_PROVIDER_ID:-tuki-sso}
        OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
        OIDC_DISCOVERY_URL: ${OIDC_DISCOVERY_URL:-https://sso.tuki.dev/.well-known/openid-configuration}
        OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET}
        OIDC_USER_INFO_URL: ${OIDC_USER_INFO_URL:-https://tuki.shattereddev.com/api/user}
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/calendar-sync
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-dev-secret}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000/api/auth}
      GOOGLE_GENERATIVE_AI_API_KEY: ${GOOGLE_GENERATIVE_AI_API_KEY:-}
    ports:
      - "3000:3000"
    # command: >
    #   sh -c "bun db:migrate && bun start:server"
    # healthcheck:
    #   test:
    #     - "CMD"
    #     - "bun"
    #     - "-e"
    #     - "const res = await fetch('http://localhost:3000/api/trpc/healthCheck?input=%7B%7D'); if (!res.ok) throw new Error(`status $${res.status}`);"
    #   interval: 15s
    #   timeout: 5s
    #   retries: 5
    restart: unless-stopped

  cron:
    image: curlimages/curl:8.6.0
    depends_on:
      - server
    environment:
      CRON_SECRET: ${CRON_SECRET:?CRON_SECRET must be set}
    entrypoint: ["/bin/sh", "-c"]
    command: [
        "while :; do \
        curl -fsS -H \"x-cron-secret:$CRON_SECRET\" http://server:3000/api/cron/calendar || echo \"calendar cron failed\"; \
        curl -fsS -H \"x-cron-secret:$CRON_SECRET\" http://server:3000/api/cron/emails || echo \"emails cron failed\"; \
        curl -fsS -H \"x-cron-secret:$CRON_SECRET\" \"http://server:3000/api/cron/waitlist?limit=50&expiresInHours=24\" || echo \"waitlist cron failed\"; \
        sleep ${CRON_INTERVAL:-600}; \
        done",
      ]
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: apps/worker/Dockerfile
    depends_on:
      - postgres
      - server
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/calendar-sync
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-dev-secret}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000/api/auth}
      GOOGLE_GENERATIVE_AI_API_KEY: ${GOOGLE_GENERATIVE_AI_API_KEY:-}
    healthcheck:
      test:
        - "CMD"
        - "bun"
        - "-e"
        - |
          const {createConnection} = await import('node:net');
          await new Promise((resolve, reject) => {
            const socket = createConnection({host: 'postgres', port: 5432});
            socket.once('connect', () => {
              socket.end();
              resolve();
            });
            socket.once('error', reject);
            setTimeout(() => {
              socket.destroy();
              reject(new Error('timeout'));
            }, 5000);
          });
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    name: calendar-sync_postgres_data
